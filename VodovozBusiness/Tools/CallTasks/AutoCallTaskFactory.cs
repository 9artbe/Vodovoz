using System;
using System.ComponentModel;
using System.Data.Bindings.Utilities;
using System.Linq;
using QS.DomainModel.UoW;
using Vodovoz.Domain.Client;
using Vodovoz.Domain.Orders;
using Vodovoz.EntityRepositories.CallTasks;
using Vodovoz.EntityRepositories.Employees;
using Vodovoz.EntityRepositories.Orders;
using Vodovoz.Services;

namespace Vodovoz.Tools.CallTasks
{
	public class AutoCallTaskFactory : IAutoCallTaskFactory , IDisposable
	{
		private Order order;
		public virtual Order Order {
			get { return order; }
			set {
				if(value == null && order != null)
					order.PropertyChanged -= OrderPropertyChanged;
				order = value; 
				ConfigureOrderChangeHeandlers(); 
			}
		}

		public ITaskCreationInteractive TaskCreationInteractive { get; set; }

		private ICallTaskFactory callTaskFactory { get;}
		private ICallTaskRepository callTaskRepository { get;}
		private IOrderRepository orderRepository { get;}
		private IEmployeeRepository employeeRepository { get;}
		private IPersonProvider personProvider { get;}

		public AutoCallTaskFactory(ICallTaskFactory callTaskFactory, ICallTaskRepository callTaskRepository, IOrderRepository orderRepository, IEmployeeRepository employeeRepository, IPersonProvider personProvider)
		{
			this.callTaskFactory = callTaskFactory ?? throw new ArgumentNullException(nameof(callTaskFactory));
			this.callTaskRepository = callTaskRepository ?? throw new ArgumentNullException(nameof(callTaskRepository));
			this.orderRepository = orderRepository ?? throw new ArgumentNullException(nameof(orderRepository));
			this.employeeRepository = employeeRepository ?? throw new ArgumentNullException(nameof(employeeRepository));
			this.personProvider = personProvider ?? throw new ArgumentNullException(nameof(personProvider));
		}

		private void ConfigureOrderChangeHeandlers()
		{
			if(order == null)
				return;
			order.PropertyChanged += OrderPropertyChanged;
		}

		private void OrderPropertyChanged(object sender, PropertyChangedEventArgs e)
		{
			string statusPropertyName = order.GetPropertyName(x => x.OrderStatus);
			if(String.Equals(e.PropertyName, statusPropertyName))
				UpdateAutoGeneratedTasks();
		}

		private bool UpdateAutoGeneratedTasks()
		{
			switch(order.OrderStatus) 
			{
				case OrderStatus.Accepted: return UpdateCallTask();
				case OrderStatus.Shipped: return UpdateDepositReturnTask();
				case OrderStatus.DeliveryCanceled: return TryDeleteTask();	
				default: return false;
			}
		}

		private bool UpdateCallTask()
		{
			if(order.DeliveryPoint == null)
				return false;

			DateTime? dateTime = null;
			if(TaskCreationInteractive != null)
				if(TaskCreationInteractive.RunQuestion(ref dateTime) == CreationTaskResult.Cancel)
					return false;


			IUnitOfWork uow = UnitOfWorkFactory.CreateWithoutRoot();

			var tasks = callTaskRepository.GetActiveTaskByDeliveryPoint(uow, order.DeliveryPoint, CallTaskStatus.Call);

			if(tasks?.FirstOrDefault() == null)
				return false;

			if(dateTime == null) {
				double dif = orderRepository.GetAvgRandeBetwenOrders(uow, order.DeliveryPoint);
				dateTime = dif <= 3 ? DateTime.Now.AddMonths(1) : DateTime.Now.AddDays(dif);
			}


			using(var taskUoW = UnitOfWorkFactory.CreateWithNewRoot<CallTask>(nameof(AutoCallTaskFactory))) {
				callTaskFactory.FillNewTask(taskUoW, taskUoW.Root, employeeRepository);
				taskUoW.Root.AssignedEmployee = tasks?.FirstOrDefault()?.AssignedEmployee;
				taskUoW.Root.TaskState = CallTaskStatus.Call;
				taskUoW.Root.DeliveryPoint = order.DeliveryPoint;
				taskUoW.Root.EndActivePeriod = dateTime.Value;
				taskUoW.Root.SourceDocumentId = order.Id;
				taskUoW.Root.Source = TaskSource.AutoFromOrder;
				taskUoW.Save();
			}

			if(tasks?.FirstOrDefault() != null) {
				foreach(var item in tasks) {
					item.IsTaskComplete = true;
					string comment = $"Автоперенос задачи на {dateTime?.ToString()}";
					item.AddComment(uow, comment);
					uow.Save(item);
				}
			}
			uow.Commit();
			uow.Dispose();
			return true;
		}

		private bool UpdateDepositReturnTask()
		{
			if(order.DeliveryPoint == null)
				return false;

			bool createTask = false;
			foreach(var item in order.OrderEquipments.Where(x => x.Direction == Direction.Deliver)) {
				if(!order.OrderEquipments.Any(x => x.Nomenclature.Id == item.Nomenclature.Id && x.Direction == Direction.PickUp)) {
					createTask = true;
					break;
				}
			}

			if(!createTask)
				return false;

			IUnitOfWork uow = UnitOfWorkFactory.CreateWithoutRoot();

			var activeTask = callTaskRepository.GetActiveTaskByDeliveryPoint(uow, order.DeliveryPoint, CallTaskStatus.DepositReturn, 1)?.FirstOrDefault();
			if(activeTask != null)
				return false;

			using(var taskUoW = UnitOfWorkFactory.CreateWithNewRoot<CallTask>(nameof(AutoCallTaskFactory))) {
				callTaskFactory.FillNewTask(taskUoW, taskUoW.Root, employeeRepository);
				taskUoW.Root.AssignedEmployee = personProvider.GetDefaultEmployeeForDepositReturnTask(taskUoW);
				taskUoW.Root.TaskState = CallTaskStatus.DepositReturn;
				taskUoW.Root.DeliveryPoint = order.DeliveryPoint;
				taskUoW.Root.EndActivePeriod = DateTime.Now.Date.AddHours(23).AddMinutes(59);
				taskUoW.Root.SourceDocumentId = order.Id;
				taskUoW.Root.Source = TaskSource.AutoFromOrder;
				taskUoW.Save();
			}

			uow.Dispose();
			return true;
		}

		private bool TryDeleteTask()
		{
			IUnitOfWork uow = UnitOfWorkFactory.CreateWithoutRoot();

			var tasks = callTaskRepository.GetAutoGeneratedTask(uow, order, CallTaskStatus.DepositReturn);

			if(tasks?.FirstOrDefault() == null)
				return false;

			foreach(var item in tasks)
				uow.Delete(item);

			uow.Commit();
			uow.Dispose();
			return true;
		}

		public void Dispose()
		{
			order.CallTaskAutoFactory = null;
		}
	}
}
