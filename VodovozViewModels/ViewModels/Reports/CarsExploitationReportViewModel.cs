using QS.Dialog;
using QS.DomainModel.UoW;
using QS.Navigation;
using QS.Project.Journal.EntitySelector;
using QS.Services;
using QS.ViewModels;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Data.Bindings;
using System.Linq;
using Vodovoz.Domain.Logistic;

namespace Vodovoz.ViewModels.Reports
{
	public class CarsExploitationReportViewModel : DialogTabViewModelBase //UowDialogViewModelBase
	{
		private readonly IInteractiveService _interactiveService;

		public CarsExploitationReportViewModel(
			IUnitOfWorkFactory unitOfWorkFactory,
			IInteractiveService interactiveService,
			INavigationManager navigation,
			IEntityAutocompleteSelectorFactory entityAutocompleteSelectorFactory)
			: base(unitOfWorkFactory, interactiveService, navigation)
		{
			Title = "Аналитика эксплуатации ТС";

			_interactiveService = interactiveService ?? throw new ArgumentNullException(nameof(interactiveService));
			CarAutocompleteSelectorFactory = entityAutocompleteSelectorFactory ?? throw new ArgumentNullException(nameof(entityAutocompleteSelectorFactory));

			DriverCarKinds = UoW.GetAll<DriverCarKind>();
		}

		public IEntityAutocompleteSelectorFactory CarAutocompleteSelectorFactory { get; set; }
		public IEnumerable<DriverCarKind> DriverCarKinds { get; set; } = new List<DriverCarKind>();
		public IEnumerable<Enum> SelectedIndicators { get; set; }

		public void OnButtonCreateReportClicked(object sender, EventArgs args)
		{
			if(!SelectedIndicators.Any())
			{
				_interactiveService.ShowMessage(ImportanceLevel.Warning, "Не выбрано ни 1 показателя");
				return;
			}
			// Запуск формирования отчета
			var report = new CarsExploitationReport()
			{

			};
		}

		public void OnButtonExportReportClicked(object sender, EventArgs args)
		{

		}

		public void ShowInfoWindow(object sender, EventArgs e)
		{
			var info =
				"Условные обозначения отчёта: <b>К</b> - авто компании, <b>Н</b> - наёмный автомобиль, <b>Л</b> - Ларгус, <b>Г</b> - Газель.\n" +
				"Столбики: <b>П</b> - принадлежность. <b>Т</b> - тип (Для <b>Н</b>: Сокр. название вида наёмного авто). <b>№</b> - номер. Показатель. <b>1,2,3</b> - даты в месяце.\n" +
				"Выборка в отчёт идёт согласно фильтрам и доп. условиям:\n" +
				" - Не попадают архивные автомобили, фуры, а также автомобили, привязанные к выездным мастерам.\n" +
				"Пояснения к показателям:\n\n" +
				"Условные обозначения: <b>Факт</b> - фильтр по фактическим данным. <b>План</b> - фильтр по планируемым данным.\n\n" +

				$"<b>{Indicator.Trips.GetEnumTitle()}</b>: Сумма Кол-ва МЛ.\n" +
				$"Факт: не считает МЛ, у которых все адреса в статусах {RouteListItemStatus.Transfered.GetEnumTitle()}, {RouteListItemStatus.Overdue.GetEnumTitle()} и {RouteListItemStatus.Canceled.GetEnumTitle()}.\n\n" +

				$"<b>{Indicator.WageDistricts.GetEnumTitle()}</b>: Если за день есть хоть один адрес в Пригороде - П, иначе Г.\n" +
				$"Факт: не считаются адреса в статусах {RouteListItemStatus.Transfered.GetEnumTitle()}, {RouteListItemStatus.Overdue.GetEnumTitle()} и {RouteListItemStatus.Canceled.GetEnumTitle()}.\n" +
				"План: не считаются адреса, перенесённые в этот МЛ.\n\n" +

				$"<b>{Indicator.MileagePlan.GetEnumTitle()}</b>: Сумма планируемого расстояния по всем МЛ.\n" +
				"Не отображается для <b>Н</b>.\n" +
				"Факт: не отображается.\n\n" +

				$"<b>{Indicator.MileageRecalculated.GetEnumTitle()}</b>: Сумма пересчитанного расстояния по всем МЛ.\n" +
				"Не отображается для <b>Н</b>.\n" +
				"План: не отображается.\n\n" +

				$"<b>{Indicator.MileageConfirmed.GetEnumTitle()}</b>: Сумма подтверждённого расстояния по всем МЛ.\n" +
				"Не отображается для <b>Н</b>.\n" +
				"План: не отображается.\n\n" +

				$"<b>{Indicator.FuelOverspending.GetEnumTitle()}</b>: Разница подтверждённого и пересчитанного расстояний по всем МЛ.\n" +
				"Не отображается для <b>Н</b>.\n" +
				"План: не отображается.\n\n" +

				$"<b>{Indicator.Undeliveries.GetEnumTitle()}</b>: Сумма кол-ва отмен заказов по всем МЛ по вине Подразделений логистики и Водителей.\n" +
				"План: не отображается.\n\n" +

				$"<b>{Indicator.LateArrivals.GetEnumTitle()}</b>: Сумма кол-ва опозданий по всем адресам по всем МЛ.\n" +
				"План: не отображается.\n\n" +

				$"<b>{Indicator.Addresses.GetEnumTitle()}</b>: Сумма кол-ва адресов во всех МЛ.\n" +
				$"Факт: не считаются адреса в статусах {RouteListItemStatus.Transfered.GetEnumTitle()}, {RouteListItemStatus.Overdue.GetEnumTitle()} и {RouteListItemStatus.Canceled.GetEnumTitle()}.\n" +
				"План: не считаются адреса, перенесённые в этот МЛ.\n\n" +

				$"<b>{Indicator.Forwarders.GetEnumTitle()}</b>: Сумма кол-ва МЛ с экспедиторами.\n" +
				"Не отображается для <b>К Л</b>.\n" +
				$"Факт: Не считает МЛ, у которых все адреса в статусах {RouteListItemStatus.Transfered.GetEnumTitle()}, {RouteListItemStatus.Overdue.GetEnumTitle()} и {RouteListItemStatus.Canceled.GetEnumTitle()}.\n\n" +

				// $"<b>{Indicator.WorkSchedules.GetEnumTitle()}</b>: Сумма кол-ва всех выходов за график работы водителя по всем МЛ.\n" +
				// "Смена водителя берётся из МЛ. Если у водителя на день МЛ (и день недели) нет такой смены – выход из графика.\n" +
				// "Выходом за график считается:\n" +
				// "   – Если время первого документа погрузки МЛ меньше или больше времени начала работы водителя.\n" +
				// "   – Если в МЛ есть хоть 1 адрес, который изменил свой статус на конечный и не является переносом\n" +
				// $"     ({RouteListItemStatus.Completed.GetEnumTitle()}, {RouteListItemStatus.Overdue.GetEnumTitle()}, {RouteListItemStatus.Canceled.GetEnumTitle()}) позже времени окончания работы водителя.\n" +
				// "План: не отображается.\n\n" +

				$"<b>{Indicator.Districts.GetEnumTitle()}</b>: Сумма кол-ва адресов во всех МЛ, не попадающих в районы, закрепленные за водителем в МЛ.\n" +
				"Версия приоритетов районов водителя подбирается аналогично версии графиков.\n" +
				$"Факт: не считаются адреса в статусах {RouteListItemStatus.Transfered.GetEnumTitle()}, {RouteListItemStatus.Overdue.GetEnumTitle()} и {RouteListItemStatus.Canceled.GetEnumTitle()}.\n" +
				"План: не считаются адреса, перенесённые в этот МЛ.\n\n" +

				$"<b>{Indicator.Loading19Litres.GetEnumTitle()}, {Indicator.LoadingKilograms.GetEnumTitle()}, {Indicator.LoadingCubicMeters.GetEnumTitle()}</b>: Сумма процентной загрузки авто по всем МЛ.\n" +
				"Факт: считаются только выполненные адреса.\n" +
				"План: не считаются адреса, перенесённые в этот МЛ.\n\n" +

				$"<b>{Indicator.LoadingAverage.GetEnumTitle()}</b>: Cреднее по 19л, кг, м3.";

			_interactiveService.ShowMessage(QS.Dialog.ImportanceLevel.Info, info, "Информация");
		}

		public void ShowCantSelectRaskatCarMessage()
		{
			_interactiveService.ShowMessage(ImportanceLevel.Warning, "Нельзя выбрать раскатный автомобиль компании в этот отчёт");
		}
	}

	public class CarsExploitationReport
	{
		public DateTime CreationDateTime { get; set; }
	}

	public enum IndicatorsType
	{
		[Display(Name = "фактическим")]
		Fact,
		[Display(Name = "планируемым")]
		Plan
	}

	public enum CarOwnType
	{
		[Display(Name = "Автопарк компании")]
		Company,
		[Display(Name = "Наёмный транспорт")]
		Driver
	}

	public enum CompanyCarType
	{
		[Display(Name = "Ларгус")]
		Largus,
		[Display(Name = "Газель")]
		Gazelle
	}

	public enum Indicator
	{
		[Display(Name = "Рейсы")]
		Trips,
		[Display(Name = "Город/Пригород")]
		WageDistricts,
		[Display(Name = "Км предп")]
		MileagePlan,
		[Display(Name = "Км пересчит")]
		MileageRecalculated,
		[Display(Name = "Км подтв")]
		MileageConfirmed,
		[Display(Name = "Перерасход")]
		FuelOverspending,
		[Display(Name = "Недовозы")]
		Undeliveries,
		[Display(Name = "Опоздания")]
		LateArrivals,
		[Display(Name = "График")]
		WorkSchedules,
		[Display(Name = "Районы")]
		Districts,
		[Display(Name = "Адреса")]
		Addresses,
		[Display(Name = "Экспедиторы")]
		Forwarders,
		[Display(Name = "Загрузка")]
		LoadingAverage,
		[Display(Name = "19л")]
		Loading19Litres,
		[Display(Name = "кг")]
		LoadingKilograms,
		[Display(Name = "м3")]
		LoadingCubicMeters
	}
}
