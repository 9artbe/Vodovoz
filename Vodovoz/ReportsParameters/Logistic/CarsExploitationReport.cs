using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using Gamma.Utilities;
using Gamma.Widgets;
using Gtk;
using QS.Dialog;
using QS.Dialog.GtkUI;
using QS.DomainModel.UoW;
using QS.Project.Journal.EntitySelector;
using QS.Report;
using QS.Services;
using QSReport;
using Vodovoz.CommonEnums;
using Vodovoz.Domain.Logistic;
using Vodovoz.Services;

namespace Vodovoz.ReportsParameters.Logistic
{
    public partial class CarsExploitationReport : SingleUoWWidgetBase, IParametersWidget
    {
        public CarsExploitationReport(
            IUnitOfWorkFactory unitOfWorkFactory,
            IEntityAutocompleteSelectorFactory carAutocompleteSelectorFactory,
            IWageParametersProvider wageParametersProvider,
            IInteractiveService interactiveService)
        {
            if(unitOfWorkFactory == null) {
                throw new ArgumentNullException(nameof(unitOfWorkFactory));
            }
            this.carAutocompleteSelectorFactory = carAutocompleteSelectorFactory ??
                throw new ArgumentNullException(nameof(carAutocompleteSelectorFactory));
            this.wageParametersProvider = wageParametersProvider ??
                throw new ArgumentNullException(nameof(wageParametersProvider));
            this.interactiveService = interactiveService ??
                throw new ArgumentNullException(nameof(interactiveService));

            UoW = unitOfWorkFactory.CreateWithoutRoot();

            this.Build();
            Configure();
        }

        private readonly IEntityAutocompleteSelectorFactory carAutocompleteSelectorFactory;
        private readonly IWageParametersProvider wageParametersProvider;
        private readonly IInteractiveService interactiveService;

        private void Configure()
        {
            ybuttonInfo.Clicked += ShowInfoWindow;
            ybuttonSelectAllIndicators.Clicked += (sender, args) => { enumchecklistIndicators.SelectAll(); };
            ybuttonUnselectAllIndicators.Clicked += (sender, args) => { enumchecklistIndicators.UnselectAll(); };

            comboDriverCarRaskat.ItemsEnum = typeof(AllYesNo);

            comboMonth.ItemsEnum = typeof(Month);
            comboMonth.SelectedItem = (Month)DateTime.Today.Month;

            int i = 0;
            comboYear.ItemsList = Enumerable.Repeat(DateTime.Today.Year, 10).Select(x => x - i++);
            comboYear.SelectedItem = DateTime.Today.Year;

            comboIndicatorsType.DefaultFirst = true;
            comboIndicatorsType.ItemsEnum = typeof(IndicatorsType);

            enumComboOwnType.ItemsEnum = typeof(CarOwnType);
            enumComboOwnType.Changed += (sender, args) => OnComboOwnTypeChanged();

            comboCompanyCarType.ItemsEnum = typeof(CompanyCarType);
            comboCompanyCarType.Changed += (sender, args) => UpdateAvailableIndicators();

            comboDriverCarType.ItemsList = UoW.GetAll<DriverCarKind>();

            entryCar.SetEntityAutocompleteSelectorFactory(carAutocompleteSelectorFactory);
            entryCar.Changed += (sender, args) => OnEntryCarChanged();

            buttonCreateReport.Clicked += OnButtonCreateReportOnClicked;

            enumchecklistIndicators.RememberStateOnHide = true;
            enumchecklistIndicators.EnumType = typeof(Indicator);
            enumchecklistIndicators.SelectAll();

            OnComboOwnTypeChanged();
        }

        private void OnButtonCreateReportOnClicked(object sender, EventArgs args)
        {
            if(!enumchecklistIndicators.SelectedValues.Any()) {
                interactiveService.ShowMessage(ImportanceLevel.Warning, "Не выбрано ни 1 показателя");
                return;
            }
            LoadReport?.Invoke(this, new LoadReportEventArgs(GetReportInfo()));
        }

        private void OnComboOwnTypeChanged()
        {
            var carOwnType = enumComboOwnType.SelectedItem as CarOwnType?;
            switch(carOwnType) {
                case CarOwnType.Company:
                    ylabelCompanyCarType.Visible = true;
                    comboCompanyCarType.Visible = true;

                    ylabelDriverCarIsRaskat.Visible = false;
                    ylabelDriverCarType.Visible = false;
                    comboDriverCarRaskat.Visible = false;
                    comboDriverCarRaskat.SelectedItem = AllYesNo.All;
                    comboDriverCarType.Visible = false;
                    comboDriverCarType.SelectedItem = SpecialComboState.All;
                    break;
                case CarOwnType.Driver:
                    ylabelDriverCarType.Visible = true;
                    comboDriverCarType.Visible = true;
                    comboDriverCarRaskat.Visible = true;
                    ylabelDriverCarIsRaskat.Visible = true;

                    ylabelCompanyCarType.Visible = false;
                    comboCompanyCarType.Visible = false;
                    comboCompanyCarType.SelectedItem = SpecialComboState.All;
                    break;
            }

            UpdateAvailableIndicators();
        }

        private void OnEntryCarChanged()
        {
            if(entryCar.Subject is Car car) {
                comboCompanyCarType.Sensitive = false;
                comboDriverCarType.Sensitive = false;
                comboDriverCarRaskat.Sensitive = false;
                enumComboOwnType.Sensitive = false;
                enumComboOwnType.SelectedItem = car.IsCompanyCar ? CarOwnType.Company : CarOwnType.Driver;

                if(enumComboOwnType.SelectedItem is CarOwnType.Company) {
                    comboCompanyCarType.SelectedItem = GetCompanyCarType(car);
                }
                else {
                    comboDriverCarType.SelectedItem = car.DriverCarKind ?? (object)SpecialComboState.All;
                    comboDriverCarRaskat.SelectedItem = car.IsRaskat ? AllYesNo.Yes : AllYesNo.No;
                }
            }
            else {
                enumComboOwnType.Sensitive = true;
                comboDriverCarType.Sensitive = true;
                comboCompanyCarType.Sensitive = true;
                comboDriverCarRaskat.Sensitive = true;
            }
            OnComboOwnTypeChanged();
        }

        private void UpdateAvailableIndicators()
        {
            enumchecklistIndicators.ClearEnumHideList();

            switch(enumComboOwnType.SelectedItem as CarOwnType?) {
                case CarOwnType.Company:

                    switch(comboCompanyCarType.SelectedItem as CompanyCarType?) {
                        case CompanyCarType.Largus:
                            enumchecklistIndicators.AddEnumToHideList(new Enum[] { Indicator.Forwarders });
                            break;
                        case CompanyCarType.LargusRaskat:
                            enumchecklistIndicators.AddEnumToHideList(new Enum[]
                                { Indicator.MileageFact, Indicator.MileagePlan, Indicator.FuelOverspending });
                            break;
                        case CompanyCarType.GazelleRaskat:
                            enumchecklistIndicators.AddEnumToHideList(new Enum[]
                                { Indicator.MileageFact, Indicator.MileagePlan, Indicator.FuelOverspending });
                            break;
                    }
                    break;

                case CarOwnType.Driver:
                    enumchecklistIndicators.AddEnumToHideList(new Enum[]
                        { Indicator.MileageFact, Indicator.MileagePlan, Indicator.FuelOverspending });
                    break;
            }
        }

        public string Title => "Аналитика эксплуатации ТС";

        public event EventHandler<LoadReportEventArgs> LoadReport;

        private ReportInfo GetReportInfo()
        {
            var selectedYear = (int)comboYear.SelectedItem;
            var selectedMonth = (int)comboMonth.SelectedItem;

            var carOwnType = "";
            if(enumComboOwnType.SelectedItemOrNull is CarOwnType ownType) {
                carOwnType = ownType.ToString();
            }

            var companyCarType = "";
            if(comboCompanyCarType.SelectedItemOrNull is CompanyCarType carType) {
                companyCarType = carType.ToString();
            }

            var driverCarTypeId = "";
            if(!comboDriverCarType.IsSelectedAll && comboDriverCarType.SelectedItem is DriverCarKind driverCarKind) {
                driverCarTypeId = driverCarKind.Id.ToString();
            }

            bool? driverCarIsRaskat = null;
            switch((AllYesNo)comboDriverCarRaskat.SelectedItem) {
                case AllYesNo.Yes:
                    driverCarIsRaskat = true;
                    break;
                case AllYesNo.No:
                    driverCarIsRaskat = false;
                    break;
            }

            return new ReportInfo {
                Identifier = "Logistic.CarsExploitationReport",
                Parameters = new Dictionary<string, object> {
                    { "start_date", new DateTime(selectedYear, selectedMonth, 1) }, {
                        "end_date",
                        new DateTime(selectedYear, selectedMonth, DateTime.DaysInMonth(selectedYear, selectedMonth),
                            23, 59, 59)
                    },
                    { "indicators_type", ((IndicatorsType)comboIndicatorsType.SelectedItem).ToString() },
                    { "car_own_type", carOwnType },
                    { "company_car_type", companyCarType },
                    { "driver_car_kind_id", driverCarTypeId },
                    { "driver_car_is_raskat", driverCarIsRaskat },
                    { "car_id", entryCar.Subject == null ? (object)null : entryCar.SubjectId },
                    { "indicators", enumchecklistIndicators.SelectedValues.Select(x => x.GetEnumTitle()) },
                    { "suburb_wage_district_id", wageParametersProvider.GetSuburbWageDistrictId },
                    { "creation_date", DateTime.Now },
                    { "days_in_month", DateTime.DaysInMonth(selectedYear, selectedMonth) }
                }
            };
        }

        private CompanyCarType GetCompanyCarType(Car car)
        {
            switch(car.TypeOfUse) {
                case CarTypeOfUse.CompanyLargus when !car.IsRaskat:
                    return CompanyCarType.Largus;
                case CarTypeOfUse.CompanyLargus when car.IsRaskat:
                    return CompanyCarType.LargusRaskat;
                case CarTypeOfUse.CompanyGAZelle when !car.IsRaskat:
                    return CompanyCarType.Gazelle;
                case CarTypeOfUse.CompanyGAZelle when car.IsRaskat:
                    return CompanyCarType.GazelleRaskat;
                default:
                    throw new InvalidOperationException();
            }
        }

        public enum IndicatorsType
        {
            [Display(Name = "планируемым")]
            Plan,
            [Display(Name = "фактическим")]
            Fact
        }

        public enum CarOwnType
        {
            [Display(Name = "Автопарк компании")]
            Company,
            [Display(Name = "Наёмный транспорт")]
            Driver
        }

        public enum CompanyCarType
        {
            [Display(Name = "Ларгус")]
            Largus,
            [Display(Name = "Ларгус раскат")]
            LargusRaskat,
            [Display(Name = "Газель")]
            Gazelle,
            [Display(Name = "Газлель раскат")]
            GazelleRaskat
        }

        public enum Indicator
        {
            [Display(Name = "Ходки")]
            Trips,
            [Display(Name = "Город/Пригород")]
            WageDistricts,
            [Display(Name = "Км предп")]
            MileagePlan,
            [Display(Name = "Км подтв")]
            MileageFact,
            [Display(Name = "Перерасход")]
            FuelOverspending,
            [Display(Name = "Недовозы")]
            Undeliveries,
            [Display(Name = "Опоздания")]
            LateArrivals,
            [Display(Name = "График")]
            WorkSchedules,
            [Display(Name = "Районы")]
            Districts,
            [Display(Name = "Адреса")]
            Addresses,
            [Display(Name = "Экспедиторы")]
            Forwarders,
            [Display(Name = "Загрузка")]
            LoadingAverage,
            [Display(Name = "19л")]
            Loading19Litres,
            [Display(Name = "кг")]
            LoadingKilograms,
            [Display(Name = "м3")]
            LoadingCubicMeters
        }

        private void ShowInfoWindow(object sender, EventArgs e)
        {
            var info =
                "Условные обозначения отчёта: <b>К</b> - авто компании, <b>Н</b> - наёмный автомобиль, <b>Л</b> - Ларгус, <b>Г</b> - Газель, <b>Р</b> - Раскат\n" +
                "Столбики: <b>П</b> - принадлежность. <b>Т</b> - тип (Для <b>Н</b>: Код вида наёмного авто). <b>№</b> - номер. Показатель. <b>1,2,3</b> - даты в месяце\n" +
                "Выборка в отчёт идёт согласно фильтрам и доп. условиям:\n" +
                " - Не попадают архивные автомобили, фуры, а также автомобили, привязанные к выездным мастерам.\n" +
                "Пояснения к показателям:\n\n" +
                "Условные обозначения: <b>Факт</b> - фильтр по фактическим данным. <b>План</b> - фильтр по планируемым данным\n" +
                
                $"<b>{Indicator.Trips.GetEnumTitle()}</b>: Сумма Кол-ва МЛ.\n" +
                $"Факт: не считает МЛ, у которых все адреса в статусах {RouteListItemStatus.Transfered.GetEnumTitle()}, {RouteListItemStatus.Canceled.GetEnumTitle()} и {RouteListItemStatus.Overdue.GetEnumTitle()}\n\n" +
                
                $"<b>{Indicator.WageDistricts.GetEnumTitle()}</b>: Если за день есть хоть один адрес в Пригороде - П, иначе Г.\n" +
                $"Факт: не считаются адреса в статусах {RouteListItemStatus.Transfered.GetEnumTitle()}, {RouteListItemStatus.Canceled.GetEnumTitle()} и {RouteListItemStatus.Overdue.GetEnumTitle()}.\n" +
                "План: не считаются адреса, перенесённые в этот МЛ\n\n" +
                
                $"<b>{Indicator.MileagePlan.GetEnumTitle()}</b>: Сумма пересчитанного расстояния по всем МЛ.\n\n" +
                
                $"<b>{Indicator.MileageFact.GetEnumTitle()}</b>: Сумма подтверждённого расстояния по всем МЛ.\n\n" +
                
                $"<b>{Indicator.FuelOverspending.GetEnumTitle()}</b>: Сумма разницы подтверждённого и пересчитанного расстояний для МЛ, где подтв. > пересч.\n\n" +
                
                $"<b>{Indicator.Undeliveries.GetEnumTitle()}</b>: Сумма кол-ва отмен заказов по всем МЛ по вине Подразделений логистики и Водителей.\n\n" +
                
                $"<b>{Indicator.LateArrivals.GetEnumTitle()}</b>: Сумма кол-ва опозданий по всем адресам по всем МЛ\n\n" +
                
                $"<b>{Indicator.WorkSchedules.GetEnumTitle()}</b>: Сумма кол-ва всех выходов за график работы водителя по всем МЛ\n" +
                "Версия графиков работы водителя подбирается активная на дату МЛ. Из версии берётся график, активный в день недели даты МЛ\n" +
                "Выходом за график считается:\n" +
                "   - Если время первого документа погрузки МЛ меньше времени начала работы водителя.\n" +
                "   - Если в МЛ есть хоть 1 адрес, который изменил свой статус на конечный и не является переносом\n" +
                $"    ({RouteListItemStatus.Completed.GetEnumTitle()}, {RouteListItemStatus.Canceled.GetEnumTitle()}, {RouteListItemStatus.Overdue.GetEnumTitle()}) позже времени окончания работы водителя\n\n" +
                
                $"<b>{Indicator.Districts.GetEnumTitle()}</b>: Сумма кол-ва адресов во всех МЛ, не попадающих в районы, закрепленные за водителем в МЛ\n" +
                "Версия приоритетов районов водителя подбирается аналогично версии графиков\n\n" +
                
                $"<b>{Indicator.Addresses.GetEnumTitle()}</b>: Сумма кол-ва адресов во всех МЛ\n" +
                $"Факт: не считаются адреса в статусах {RouteListItemStatus.Transfered.GetEnumTitle()}, {RouteListItemStatus.Canceled.GetEnumTitle()} и {RouteListItemStatus.Overdue.GetEnumTitle()}.\n" +
                "План: не считаются адреса, перенесённые в этот МЛ\n\n" +
                
                $"<b>{Indicator.Forwarders.GetEnumTitle()}</b>: Сумма кол-ва МЛ с экспедиторами\n" +
                $"Факт: Не считает МЛ, у которых все адреса в статусах {RouteListItemStatus.Transfered.GetEnumTitle()}, {RouteListItemStatus.Canceled.GetEnumTitle()} и {RouteListItemStatus.Overdue.GetEnumTitle()}\n\n" +
                
                $"<b>{Indicator.Loading19Litres.GetEnumTitle()}, {Indicator.LoadingKilograms.GetEnumTitle()}, {Indicator.LoadingCubicMeters.GetEnumTitle()}</b>: Сумма процентной загрузки авто по всем МЛ\n" +
                "Факт: считаются только выполненные адреса\n" +
                "План: не считаются адреса, перенесённые в этот МЛ\n";


            var label = new Label { Markup = info };
            label.SetPadding(10, 10);
            
            var vbox = new VBox { label };

            var messageWindow = new Window(WindowType.Toplevel) {
                Resizable = false, 
                Title = "Информация", 
                WindowPosition = WindowPosition.Center,
                Modal = true
            };
            messageWindow.Add(vbox);
            messageWindow.ShowAll();
        }
    }
}
