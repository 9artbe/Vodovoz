using System;
using System.Linq;
using Gamma.Widgets;
using QS.Views.GtkUI;
using Vodovoz.CommonEnums;
using Vodovoz.Domain.Logistic;
using Vodovoz.ViewModels.Reports;

namespace Vodovoz.Views.Reports
{
	[System.ComponentModel.ToolboxItem(true)]
	public partial class CarsExploitationReportView : TabViewBase<CarsExploitationReportViewModel>
	{
		public CarsExploitationReportView(CarsExploitationReportViewModel viewModel) : base(viewModel)
		{
			this.Build();

			Configure();
		}

		private void Configure()
		{
			hboxDriverDelayTime.Visible = ylabelDriverScheduleDelay.Visible = false;

			yspinMinutes.ValueAsInt = 30;

			ybuttonInfo.Clicked += ViewModel.ShowInfoWindow;
			ybuttonSelectAllIndicators.Clicked += (sender, args) => { enumchecklistIndicators.SelectAll(); };
			ybuttonUnselectAllIndicators.Clicked += (sender, args) => { enumchecklistIndicators.UnselectAll(); };

			comboIsRaskat.ItemsEnum = typeof(AllYesNo);

			comboMonth.ItemsEnum = typeof(Month);
			comboMonth.SelectedItem = (Month)DateTime.Today.Month;

			comboYear.DefaultFirst = true;
			comboYear.ItemsList = Enumerable.Range(DateTime.Now.AddYears(-10).Year, 11).Reverse();

			comboIndicatorsType.DefaultFirst = true;
			comboIndicatorsType.ItemsEnum = typeof(IndicatorsType);
			comboIndicatorsType.EnumItemSelected += (sender, args) => UpdateAvailableIndicators();

			enumComboOwnType.ItemsEnum = typeof(CarOwnType);
			enumComboOwnType.EnumItemSelected += (sender, args) => OnComboOwnTypeChanged();

			comboCompanyCarType.ItemsEnum = typeof(CompanyCarType);
			comboCompanyCarType.EnumItemSelected += (sender, args) => UpdateAvailableIndicators();

			comboDriverCarKind.WidthRequest = 150;
			comboDriverCarKind.ItemsList = ViewModel.DriverCarKinds;

			entryCar.SetEntityAutocompleteSelectorFactory(ViewModel.CarAutocompleteSelectorFactory);
			entryCar.Changed += (sender, args) => OnEntryCarChanged();

			buttonCreateReport.Clicked += (s, e) => { ViewModel.SelectedIndicators = enumchecklistIndicators.SelectedValues; ViewModel.OnButtonCreateReportClicked(s, e); };

			enumchecklistIndicators.RememberStateOnHide = true;
			enumchecklistIndicators.EnumType = typeof(Indicator);
			enumchecklistIndicators.SelectAll();

			OnComboOwnTypeChanged();
		}


		protected void OnEventboxArrowButtonPressEvent(object o, Gtk.ButtonPressEventArgs args)
		{
		}

		private void UpdateAvailableIndicators()
		{
			enumchecklistIndicators.ClearEnumHideList();

			enumchecklistIndicators.AddEnumToHideList(new Enum[] { Indicator.WorkSchedules });

			if((IndicatorsType)comboIndicatorsType.SelectedItem == IndicatorsType.Plan)
			{
				enumchecklistIndicators.AddEnumToHideList(
					new Enum[] {
						Indicator.MileageRecalculated,
						Indicator.MileageConfirmed,
						Indicator.FuelOverspending,
						Indicator.Undeliveries,
						Indicator.LateArrivals,
						Indicator.WorkSchedules
					});
			}
			else
			{
				enumchecklistIndicators.AddEnumToHideList(new Enum[] { Indicator.MileagePlan });
			}

			switch(enumComboOwnType.SelectedItem as CarOwnType?)
			{
				case CarOwnType.Company:
					if(comboCompanyCarType.SelectedItem is CompanyCarType.Largus)
					{
						enumchecklistIndicators.AddEnumToHideList(new Enum[] { Indicator.Forwarders });
					}
					break;
				case CarOwnType.Driver:
					enumchecklistIndicators.AddEnumToHideList(
						new Enum[] { Indicator.MileageConfirmed, Indicator.MileagePlan, Indicator.MileageRecalculated, Indicator.FuelOverspending });
					break;
			}
		}

		private void OnComboOwnTypeChanged()
		{
			var carOwnType = enumComboOwnType.SelectedItem as CarOwnType?;
			switch(carOwnType)
			{
				case CarOwnType.Company:
					ylabelCompanyCarType.Visible = true;
					comboCompanyCarType.Visible = true;

					comboIsRaskat.Sensitive = false;
					comboIsRaskat.SelectedItem = AllYesNo.No;
					ylabelDriverCarType.Visible = false;
					comboDriverCarKind.Visible = false;
					comboDriverCarKind.SelectedItem = SpecialComboState.All;
					break;
				case CarOwnType.Driver:
					if(entryCar.Subject == null)
					{
						comboIsRaskat.Sensitive = true;
					}

					ylabelDriverCarType.Visible = true;
					comboDriverCarKind.Visible = true;

					ylabelCompanyCarType.Visible = false;
					comboCompanyCarType.Visible = false;
					comboCompanyCarType.SelectedItem = SpecialComboState.All;
					break;
			}

			UpdateAvailableIndicators();
		}

		private void OnEntryCarChanged()
		{
			if(entryCar.Subject is Car car)
			{
				if(car.IsRaskat && car.IsCompanyCar)
				{
					ViewModel.ShowCantSelectRaskatCarMessage();
					entryCar.Subject = null;
					return;
				}

				comboCompanyCarType.Sensitive = false;
				comboDriverCarKind.Sensitive = false;
				comboIsRaskat.Sensitive = false;
				enumComboOwnType.Sensitive = false;
				enumComboOwnType.SelectedItem = car.IsCompanyCar ? CarOwnType.Company : CarOwnType.Driver;

				if(enumComboOwnType.SelectedItem is CarOwnType.Company)
				{
					switch(car.TypeOfUse)
					{
						case CarTypeOfUse.CompanyLargus:
							comboCompanyCarType.SelectedItem = CompanyCarType.Largus;
							break;
						case CarTypeOfUse.CompanyGAZelle:
							comboCompanyCarType.SelectedItem = CompanyCarType.Gazelle;
							break;
						default:
							throw new InvalidOperationException();
					}
				}
				else
				{
					comboDriverCarKind.SelectedItem = car.DriverCarKind ?? (object)SpecialComboState.All;
					comboIsRaskat.SelectedItem = car.IsRaskat ? AllYesNo.Yes : AllYesNo.No;
				}
			}
			else
			{
				enumComboOwnType.Sensitive = true;
				comboDriverCarKind.Sensitive = true;
				comboCompanyCarType.Sensitive = true;
				comboIsRaskat.Sensitive = true;
			}

			OnComboOwnTypeChanged();
		}
	}
}
