using System;
using System.Linq;
using Gamma.Utilities;
using Gamma.Widgets;
using Gamma.Widgets.Additions;
using Gtk;
using QS.Views.GtkUI;
using Vodovoz.CommonEnums;
using Vodovoz.Domain.Logistic;
using Vodovoz.ViewModels.Reports;

namespace Vodovoz.Views.Reports
{
	[System.ComponentModel.ToolboxItem(true)]
	public partial class CarsExploitationReportView : TabViewBase<CarsExploitationReportViewModel>
	{
		public CarsExploitationReportView(CarsExploitationReportViewModel viewModel) : base(viewModel)
		{
			this.Build();

			Configure();
		}

		private void Configure()
		{
			UpdateSliderArrow();

			// Период

			comboMonth.ItemsEnum = typeof(Month);
			comboMonth.SelectedItem = (Month)DateTime.Today.Month;
			comboMonth.Binding.AddBinding(ViewModel, vm => vm.StartMonth, w => w.SelectedItem).InitializeFromSource();

			comboYear.DefaultFirst = true;
			comboYear.ItemsList = Enumerable.Range(DateTime.Now.AddYears(-10).Year, 11).Reverse();
			comboYear.Binding.AddBinding(ViewModel, vm => vm.StartYear, w => w.SelectedItem).InitializeFromSource();

			// Подсчет по

			comboIndicatorsType.DefaultFirst = true;
			comboIndicatorsType.ItemsEnum = typeof(IndicatorsType);
			comboIndicatorsType.EnumItemSelected += (sender, args) => UpdateAvailableIndicators();
			comboIndicatorsType.Binding.AddBinding(ViewModel, vm => vm.IndicatorsType, w => w.SelectedItem).InitializeFromSource();

			// Принадлежность автомобиля

			enumComboOwnType.ItemsEnum = typeof(CarOwnType);
			enumComboOwnType.EnumItemSelected += (sender, args) => OnComboOwnTypeChanged();
			enumComboOwnType.Binding.AddBinding(ViewModel, vm => vm.CarOwnType, w => w.SelectedItem).InitializeFromSource();

			// Тип автомобиля компании

			comboCompanyCarType.DefaultFirst = true;
			comboCompanyCarType.ItemsEnum = typeof(CompanyCarType);
			comboCompanyCarType.EnumItemSelected += (sender, args) => UpdateAvailableIndicators();
			comboCompanyCarType.Binding.AddBinding(ViewModel, vm => vm.CompanyCarType, w => w.SelectedItem).InitializeFromSource();

			// Вид автомобиля водителя

			comboDriverCarKind.WidthRequest = 150;
			comboDriverCarKind.ItemsList = ViewModel.DriverCarKinds;
			comboDriverCarKind.Binding.AddBinding(ViewModel, vm => vm.DriverCarKind, w => w.SelectedItem).InitializeFromSource();

			// Раскат

			comboIsRaskat.ItemsEnum = typeof(AllYesNo);
			comboIsRaskat.Binding.AddBinding(ViewModel, vm => vm.Raskat, w => w.SelectedItem).InitializeFromSource();

			hboxDriverDelayTime.Visible = ylabelDriverScheduleDelay.Visible = false;

			yspinMinutes.ValueAsInt = 30;

			ybuttonInfo.Clicked += (sender, args) => { ViewModel.ShowInfoWindow(); };
			ybuttonSelectAllIndicators.Clicked += (sender, args) => { enumchecklistIndicators.SelectAll(); };
			ybuttonUnselectAllIndicators.Clicked += (sender, args) => { enumchecklistIndicators.UnselectAll(); };
			
			comboDriverCarKind.WidthRequest = 150;
			comboDriverCarKind.ItemsList = ViewModel.DriverCarKinds;

			entryCar.SetEntityAutocompleteSelectorFactory(ViewModel.CarAutocompleteSelectorFactory);
			entryCar.Binding.AddBinding(ViewModel, vm => vm.Car, w => w.Subject);
			entryCar.Changed += (sender, args) => OnEntryCarChanged();

			ybuttonSave.Binding.AddBinding(ViewModel, vm => vm.CanSave, w => w.Sensitive).InitializeFromSource();

			ybuttonSave.Clicked += (sender, args) => {
				var extension = ".xlsx";

				var filechooser = new FileChooserDialog("Сохранить отчет...",
					null,
					FileChooserAction.Save,
					"Отменить", ResponseType.Cancel,
					"Сохранить", ResponseType.Accept)
				{
					CurrentName = $"{Tab.TabName} {ViewModel.Report.CreationDate:yyyy-MM-dd-HH-mm}{extension}"
				};

				var excelFilter = new FileFilter
				{
					Name = $"Документ Microsoft Excel ({extension})"
				};

				excelFilter.AddMimeType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
				excelFilter.AddPattern($"*{extension}");
				filechooser.AddFilter(excelFilter);

				if(filechooser.Run() == (int)ResponseType.Accept)
				{
					var path = filechooser.Filename;

					if(!path.Contains(extension))
					{
						path += extension;
					}

					ViewModel.ExportReport(path);
				}

				filechooser.Destroy();
			};

			enumchecklistIndicators.RememberStateOnHide = true;
			enumchecklistIndicators.EnumType = typeof(Indicator);
			enumchecklistIndicators.Binding.AddBinding(ViewModel, vm => vm.SelectedIndicators, w => w.SelectedValuesList, new EnumsListConverter<Indicator>());

			buttonCreateReport.Clicked += ViewModel.ActionGenerateReport;

			ViewModel.PropertyChanged += ViewModel_PropertyChanged;

			OnComboOwnTypeChanged();

			enumchecklistIndicators.SelectAll();
		}

		private void ConfigureTreeView()
		{
			var columnsConfig = Gamma.ColumnConfig.FluentColumnsConfig<CarsExploitationReportRow>.Create()
				.AddColumn("№").AddNumericRenderer(row => row.CarOrderNumber)
				.AddColumn("П").AddEnumRenderer(row => row.CarOwnType)
				.AddColumn("Т").AddTextRenderer(row => row.CarType != null ? row.CarType.Value.GetEnumTitle() : "")
				.AddColumn("Номер").AddTextRenderer(row => row.RegNumber)
				.AddColumn("Показатель").AddEnumRenderer(row => row.Indicator)
				.AddColumn("Закрепленный водитель").AddTextRenderer(row => row.AssignedDriver)
				.AddColumn("Обслуж. ч. города").AddTextRenderer(row => row.GeographicalGroups);

			var daysInMonth = DateTime.DaysInMonth(ViewModel.Report.StartDate.Year, ViewModel.Report.StartDate.Month);

			for(var i = 0; i < daysInMonth; i++)
			{
				var index = i;
				columnsConfig.AddColumn($"День {i + 1}").AddTextRenderer(row => row.Days[index]);
			}

			ytreeview1.ColumnsConfig = columnsConfig.Finish();
		}

		private void UpdateSliderArrow()
		{
			arrowSlider.ArrowType = parametersContainer.Visible ? Gtk.ArrowType.Left : Gtk.ArrowType.Right;
		}

		protected void OnEventboxArrowButtonPressEvent(object o, Gtk.ButtonPressEventArgs args)
		{
			parametersContainer.Visible = !parametersContainer.Visible;
			UpdateSliderArrow();
		}

		private void UpdateAvailableIndicators()
		{
			enumchecklistIndicators.ClearEnumHideList();

			enumchecklistIndicators.AddEnumToHideList(new Enum[] { Indicator.WorkSchedules });

			if((IndicatorsType)comboIndicatorsType.SelectedItem == IndicatorsType.Plan)
			{
				enumchecklistIndicators.AddEnumToHideList(
					new Enum[] {
						Indicator.MileageRecalculated,
						Indicator.MileageConfirmed,
						Indicator.FuelOverspending,
						Indicator.Undeliveries,
						Indicator.LateArrivals,
						Indicator.WorkSchedules
					});
			}
			else
			{
				enumchecklistIndicators.AddEnumToHideList(new Enum[] { Indicator.MileagePlan });
			}

			switch(enumComboOwnType.SelectedItem as CarOwnType?)
			{
				case CarOwnType.Company:
					if(comboCompanyCarType.SelectedItem is CompanyCarType.Largus)
					{
						enumchecklistIndicators.AddEnumToHideList(new Enum[] { Indicator.Forwarders });
					}
					break;
				case CarOwnType.Driver:
					enumchecklistIndicators.AddEnumToHideList(
						new Enum[] { Indicator.MileageConfirmed, Indicator.MileagePlan, Indicator.MileageRecalculated, Indicator.FuelOverspending });
					break;
			}
		}

		private void ViewModel_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
		{
			if(e.PropertyName == nameof(ViewModel.Report))
			{
				if(ViewModel.Report?.Rows != null)
				{
					ConfigureTreeView();
					ytreeview1.ItemsDataSource = ViewModel.Report.Rows;
					ytreeview1.YTreeModel.EmitModelChanged();
				}
			}
		}

		private void OnComboOwnTypeChanged()
		{
			var carOwnType = enumComboOwnType.SelectedItem as CarOwnType?;
			switch(carOwnType)
			{
				case CarOwnType.Company:
					ylabelCompanyCarType.Visible = true;
					comboCompanyCarType.Visible = true;

					comboIsRaskat.Sensitive = false;
					comboIsRaskat.SelectedItem = AllYesNo.No;
					ylabelDriverCarType.Visible = false;
					comboDriverCarKind.Visible = false;
					comboDriverCarKind.SelectedItem = SpecialComboState.All;
					break;
				case CarOwnType.Driver:
					if(entryCar.Subject == null)
					{
						comboIsRaskat.Sensitive = true;
					}

					ylabelDriverCarType.Visible = true;
					comboDriverCarKind.Visible = true;

					ylabelCompanyCarType.Visible = false;
					comboCompanyCarType.Visible = false;
					break;
			}

			UpdateAvailableIndicators();
		}

		private void OnEntryCarChanged()
		{
			if(entryCar.Subject is Car car)
			{
				if(car.IsRaskat && car.IsCompanyCar)
				{
					ViewModel.ShowCantSelectRaskatCarMessage();
					entryCar.Subject = null;
					return;
				}

				comboCompanyCarType.Sensitive = false;
				comboDriverCarKind.Sensitive = false;
				comboIsRaskat.Sensitive = false;
				enumComboOwnType.Sensitive = false;
				enumComboOwnType.SelectedItem = car.IsCompanyCar ? CarOwnType.Company : CarOwnType.Driver;

				if(enumComboOwnType.SelectedItem is CarOwnType.Company)
				{
					switch(car.TypeOfUse)
					{
						case CarTypeOfUse.CompanyLargus:
							comboCompanyCarType.SelectedItem = CompanyCarType.Largus;
							break;
						case CarTypeOfUse.CompanyGAZelle:
							comboCompanyCarType.SelectedItem = CompanyCarType.Gazelle;
							break;
						default:
							throw new InvalidOperationException();
					}
				}
				else
				{
					comboDriverCarKind.SelectedItem = car.DriverCarKind ?? (object)SpecialComboState.All;
					comboIsRaskat.SelectedItem = car.IsRaskat ? AllYesNo.Yes : AllYesNo.No;
				}
			}
			else
			{
				enumComboOwnType.Sensitive = true;
				comboDriverCarKind.Sensitive = true;
				comboCompanyCarType.Sensitive = true;
				comboIsRaskat.Sensitive = true;
			}

			OnComboOwnTypeChanged();
		}

		protected void OnYbuttonSaveClicked(object sender, EventArgs e)
		{
		}
	}
}
